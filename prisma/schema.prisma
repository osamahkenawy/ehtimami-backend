generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String  @db.VarChar(50)
  lastName  String  @db.VarChar(50)
  email     String  @unique @db.VarChar(100)
  password  String  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school_manager_id Int?   @unique 
  roles     UserAccessRoles[]
  profile   UserProfile?
  statusId  Int     @default(2) // Default to "Inactive"
  status    UserStatus @relation(fields: [statusId], references: [id], onDelete: Restrict)

  // New relation to School
  managedSchool School?
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(50)

  users UserAccessRoles[]
}

model UserAccessRoles {
  userId Int
  roleId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId]) // Composite primary key
}

model UserProfile {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  bio     String? @db.Text
  avatar  String? @db.VarChar(255)

  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStatus {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  users User[]
}

model School {
  id               Int      @id @default(autoincrement())
  school_unique_id String   @unique
  school_name      String   @db.VarChar(100)
  school_address   String   @db.Text
  school_lat       Float?
  school_lng       Float?
  school_type      SchoolType
  school_manager_id Int     @unique
  school_email     String   @unique @db.VarChar(100)
  school_phone     String   @unique @db.VarChar(20)
  school_region    String   @db.VarChar(50)
  school_city      String   @db.VarChar(50)
  school_district  String?  @db.VarChar(50)
  education_level  EducationLevel
  curriculum       CurriculumType
  school_logo      String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Foreign Key Relation to User
  manager          User @relation(fields: [school_manager_id], references: [id], onDelete: Cascade)
}

enum SchoolType {
  PRIVATE
  PUBLIC
  INTERNATIONAL
  SPECIAL_NEEDS
}

enum EducationLevel {
  PRIMARY
  INTERMEDIATE
  SECONDARY
  KINDERGARTEN
}

enum CurriculumType {
  SAUDI_NATIONAL
  IB
  AMERICAN
  BRITISH
  FRENCH
  OTHER
}
