generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  SUSPENDED
  PENDING_APPROVAL
}

enum SchoolStatus {
  ACTIVE
  INACTIVE
}

enum SchoolType {
  PRIVATE
  PUBLIC
  INTERNATIONAL
  SPECIAL_NEEDS
}

enum EducationLevel {
  ALL
  PRIMARY
  INTERMEDIATE
  SECONDARY
  KINDERGARTEN
}

enum CurriculumType {
  SAUDI_NATIONAL
  IB
  AMERICAN
  BRITISH
  FRENCH
  OTHER
}

enum DocumentType {
  ID_PROOF
  CERTIFICATE
  CONTRACT
  REPORT_CARD
  CV
  OTHER
}

model User {
  id                  Int        @id @default(autoincrement())
  firstName           String     @db.VarChar(50)
  lastName            String     @db.VarChar(50)
  username            String?    @unique @db.VarChar(50)
  email               String     @unique @db.VarChar(100)
  phone               String?    @unique @db.VarChar(20)
  password            String     @db.VarChar(255)
  is_verified         Boolean    @default(false)
  verification_token  String?    @db.VarChar(255)
  reset_token         String?    @db.VarChar(255)
  reset_token_expires DateTime?
  two_factor_enabled  Boolean    @default(false)
  two_factor_secret   String?    @db.VarChar(255)
  status              UserStatus @default(ACTIVE)
  parentId            Int?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  profile             UserProfile?
  schools             UserSchool[]
  roles               UserAccessRoles[]
  teacherClasses      ClassTeacher[]
  managedSchools      SchoolAdmin[]
  passwordResetTokens PasswordResetToken[]
  documents           Document[]

  parent   User?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: SetNull)
  children User[] @relation("ParentChild")

  student       Student?
  parentProfile Parent?
  employee      Employee?
}

model UserProfile {
  id                 Int           @id @default(autoincrement())
  userId             Int           @unique
  bio                String?       @db.Text
  avatar             String?       @db.VarChar(255)
  profile_banner     String?       @db.VarChar(255)
  middleName         String?       @db.VarChar(50)
  nickname           String?       @db.VarChar(50)
  occupation         String?       @db.VarChar(100)
  company            String?       @db.VarChar(100)
  website            String?       @db.VarChar(255)
  social_links       Json?
  preferences        Json?
  interests          Json?
  marital_status     MaritalStatus @default(SINGLE)
  nationality        String        @default("Unknown") @db.VarChar(100)
  birth_date         DateTime?
  join_date          DateTime      @default(now())
  gender             Int           @default(1)
  user_language      String?       @default("en") @db.VarChar(10)
  timezone             String?       @default("Asia/Riyadh") @db.VarChar(50) // ðŸŒŸ ADD THIS
  address            String?       @db.Text
  latitude           Float?
  longitude          Float?
  emergency_contacts Json?
  profile_visibility String        @default("public")
  updatedAt          DateTime      @default(now()) @updatedAt
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id         Int          @id @default(autoincrement())
  userId     Int
  name       String
  fileUrl    String
  type       DocumentType
  role       String
  uploadedAt DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id    Int               @id @default(autoincrement())
  name  String            @unique @db.VarChar(50)
  users UserAccessRoles[]
}

model UserAccessRoles {
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model UserSchool {
  userId   Int
  schoolId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@id([userId, schoolId])
}

model School {
  id               Int            @id @default(autoincrement())
  school_unique_id String         @unique
  school_name      String         @db.VarChar(100)
  school_address   String         @db.Text
  school_lat       Float?
  school_lng       Float?
  school_type      SchoolType
  school_email     String         @unique @db.VarChar(100)
  school_phone     String         @unique @db.VarChar(20)
  school_region    String?        @db.VarChar(50)
  school_city      String?        @db.VarChar(50)
  school_district  String?        @db.VarChar(50)
  education_level  EducationLevel
  curriculum       CurriculumType
  school_logo      String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  status           SchoolStatus   @default(ACTIVE)

  users     UserSchool[]
  classes   Class[]
  admins    SchoolAdmin[]
  students  Student[]
  employees Employee[]
}

model SchoolAdmin {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  schoolId Int
  role     String @default("admin")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Class {
  id              Int            @id @default(autoincrement())
  code            String         @unique
  name            String
  description     String?        @db.Text
  gradeLevel      String?
  section         String?
  subject         String         @default("General")
  semester        Int            @default(1)
  academic_year   String         @default("2024-2025")
  teaching_method String         @default("in-person")
  capacity        Int?
  max_students    Int            @default(30)
  roomNumber      String?
  class_logo      String?
  status          String         @default("active")
  days_of_week    Json?
  start_time      String         @default("08:00:00")
  end_time        String         @default("10:00:00")
  schedule        Json?
  credits         Int?
  startDate       DateTime       @default(now())
  endDate         DateTime       @default(now())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  schoolId        Int
  school          School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teachers        ClassTeacher[]
  studentClasses  StudentClass[]
  mainStudents    Student[]      @relation("MainClass") // âœ… Unique relation name
  attendances     Attendance[]
}

model StudentClass {
  studentId Int
  classId   Int

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([studentId, classId])
}

model ClassTeacher {
  teacherId Int
  classId   Int

  teacher User  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([teacherId, classId])
}

model Student {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  schoolId    Int
  student_no  String  @unique
  grade       String
  section     String?
  mainClassId Int?
  mainClass   Class?  @relation("MainClass", fields: [mainClassId], references: [id])

  admission_date    DateTime?
  previous_school   String?
  guardian_name     String?
  guardian_relation String?
  guardian_contact  String?
  is_special_needs  Boolean?  @default(false)
  learning_style    String?
  health_notes      String?
  device_id         String?
  student_category  String?

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  school         School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  studentClasses StudentClass[]
  parents        Parent[]
  attendances    Attendance[]
}

model Parent {
  id     Int @id @default(autoincrement())
  userId Int @unique

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]
}

model Employee {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  position String
  schoolId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        Int      @id @default(autoincrement())
  studentId Int
  classId   Int
  date      DateTime
  status    String

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
