generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int        @id @default(autoincrement())
  firstName           String     @db.VarChar(50)
  lastName            String     @db.VarChar(50)
  username            String?    @unique @db.VarChar(50)
  email               String     @unique @db.VarChar(100)
  phone               String?    @unique @db.VarChar(20)
  password            String     @db.VarChar(255)
  is_verified         Boolean    @default(false)
  verification_token  String?    @db.VarChar(255)
  reset_token         String?    @db.VarChar(255)
  reset_token_expires DateTime?
  two_factor_enabled  Boolean    @default(false)
  two_factor_secret   String?    @db.VarChar(255)
  status              UserStatus @default(ACTIVE)
  parentId            Int? // ✅ Parent-child relationship
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  profile UserProfile?

  schools        UserSchool[]
  roles          UserAccessRoles[]
  teacherClasses ClassTeacher[]

  parent         User?         @relation("ParentChild", fields: [parentId], references: [id], onDelete: SetNull)
  children       User[]        @relation("ParentChild")
  // ✅ Added relation for SchoolAdmin (Fixes the error)
  managedSchools SchoolAdmin[]
}

model UserProfile {
  id                 Int           @id @default(autoincrement())
  userId             Int           @unique
  bio                String?       @db.Text
  avatar             String?       @db.VarChar(255)
  profile_banner     String?       @db.VarChar(255)
  middleName         String?       @db.VarChar(50)
  nickname           String?       @db.VarChar(50)
  occupation         String?       @db.VarChar(100)
  company            String?       @db.VarChar(100)
  website            String?       @db.VarChar(255)
  social_links       Json?
  preferences        Json?
  interests          Json?
  marital_status     MaritalStatus @default(SINGLE)
  nationality        String        @default("Unknown") @db.VarChar(100)
  phone              String?
  birth_date         DateTime?
  join_date          DateTime      @default(now())
  gender             Int           @default(1) // 1 = Male, 2 = Female, 3 = Other
  address            String?       @db.Text
  latitude           Float?
  longitude          Float?
  emergency_contacts Json? // ✅ New: Emergency contact list
  profile_visibility String        @default("public") // ✅ public, private, school-only

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)

  users UserAccessRoles[]
}

model UserAccessRoles {
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model UserSchool {
  userId   Int
  schoolId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@id([userId, schoolId])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  SUSPENDED
  PENDING_APPROVAL
}

model School {
  id               Int            @id @default(autoincrement())
  school_unique_id String         @unique
  school_name      String         @db.VarChar(100)
  school_address   String         @db.Text
  school_lat       Float?
  school_lng       Float?
  school_type      SchoolType
  school_email     String         @unique @db.VarChar(100)
  school_phone     String         @unique @db.VarChar(20)
  school_region    String?         @db.VarChar(50)
  school_city      String?         @db.VarChar(50)
  school_district  String?        @db.VarChar(50)
  education_level  EducationLevel
  curriculum       CurriculumType
  school_logo      String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  status           SchoolStatus   @default(ACTIVE)

  users   UserSchool[]
  classes Class[]
  admins  SchoolAdmin[] // ✅ New: Allows multiple admins
}

model SchoolAdmin {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  schoolId Int
  role     String @default("admin")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

enum SchoolStatus {
  ACTIVE
  INACTIVE
}

enum SchoolType {
  PRIVATE
  PUBLIC
  INTERNATIONAL
  SPECIAL_NEEDS
}

model Class {
  id              Int      @id @default(autoincrement())
  code            String   @unique  // ✅ Ensure this is marked as unique
  name            String
  description     String?  @db.Text
  gradeLevel      String?
  section         String? // ✅ New: Section name
  subject         String   @default("General") @db.VarChar(100)
  semester        Int      @default(1)
  academic_year   String   @default("2024-2025") @db.VarChar(20)
  teaching_method String   @default("in-person") // ✅ online, in-person, hybrid
  capacity        Int?
  max_students    Int      @default(30)
  roomNumber      String?
  class_logo      String?  @db.VarChar(255)
  status          String   @default("active")
  days_of_week    Json?
  start_time      String   @default("08:00:00") @db.VarChar(10)
  end_time        String   @default("10:00:00") @db.VarChar(10)
schedule        Json?
  credits         Int?
  startDate       DateTime @default(now())
  endDate         DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  schoolId        Int
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  teachers ClassTeacher[]
}

model ClassTeacher {
  teacherId Int
  classId   Int

  teacher User  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([teacherId, classId])
}

enum EducationLevel {
  ALL
  PRIMARY
  INTERMEDIATE
  SECONDARY
  KINDERGARTEN
}

enum CurriculumType {
  SAUDI_NATIONAL
  IB
  AMERICAN
  BRITISH
  FRENCH
  OTHER
}
